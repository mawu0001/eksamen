---
import Layout from "../general/layout.astro";
import Behandlings from "../components/Behandlings.astro";
import Knap from "../components/Knap.astro";
import Scrollprogressbar from "../components/Scrollprogressbar.astro";
const data = await fetch(
  "https://jnfsonguvexswcioudjt.supabase.co/rest/v1/behandlinger",
  {
    method: "GET",
    headers: {
      apikey:
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpuZnNvbmd1dmV4c3djaW91ZGp0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTU3NjYyMjksImV4cCI6MjAzMTM0MjIyOX0.Z02awUWrz1wRXwd_Ybyt7-aHDrrAk2vnohh-uoBD2mQ",
    },
  }
).then((res) => res.json());

const Type = data.filter((behandling) => behandling.kategori == "area");
const Area = data.filter((behandling) => behandling.kategori == "type");
---

<Layout>
  <Scrollprogressbar />
  <a id="arrow" href="#"><img src="/svg/arrowup.svg" alt="pil op" /></a>
  <section>
    <div class="localmenu1">
      <h2>Behandlingsområder</h2>
      <article class="submenu">
        <a href="#spiseforstyrrelse">Spiseforstyrrelse</a>
        <a href="#stress">Stress</a>
        <a href="#angst">Angst</a>
        <a href="#s_sensitiv">Særligt Sensitiv</a>
      </article>
    </div>
    <article class="indhold">
      {
        Type.map((data) => {
          return <Behandlings indhold={data} />;
        })
      }
    </article>
  </section>
  <section>
    <div class="localmenu2">
      <h2>Behandlingstyper</h2>
      <article class="submenu">
        <a href="#walk_&_talk">Walk & Talk</a>
        <a href="#samtale">Samtale</a>
        <a href="#online">Online</a>
      </article>
    </div>
    <article class="indhold">
      {
        Area.map((data) => {
          return <Behandlings indhold={data} />;
        })
      }
    </article>
  </section>
  <section id="kontakt">
    <p>
      Hvis du føler, mine tilbud kan hjælpe dig, så tøv ikke med at booke en
      tid!
    </p>
    <Knap title="Book tid" link="/priserkontakt.html" />
  </section>
</Layout>

<style>
  /* Essential Styles */
  #arrow {
    position: fixed;
    right: 20px;
    bottom: 20px;
    z-index: 1000;
    cursor: pointer;
  }
  a {
    color: var(--Pesto950);
    text-align: center;
    font-family: "General Sans";
    font-size: 24px;
    font-style: normal;
    font-weight: 500;
    line-height: normal;
    text-transform: uppercase;
    text-decoration: none;
    width: fit-content;
  }
  a:hover {
    font-weight: 600;
  }
  h2 {
    text-align: center;
    padding-bottom: 40px;
  }
  .indhold {
    margin-bottom: 70px;
    padding: 5% 12%;
  }
  .localmenu1 {
    background-color: var(--pesto300);
    padding: 70px 90px;
  }
  .localmenu2 {
    background-color: var(--flamepea300);
    padding: 70px 90px;
  }
  .submenu {
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    column-gap: 20px;
  }
  #kontakt {
    display: grid;
    place-items: center;
    text-align: center;
    margin: 100px 220px;
  }

  /* Responsive Styles */
  @media (max-width: 800px) {
    #kontakt {
      margin: 100px 120px;
    }
    a {
      font-size: 16px;
    }
  }
  @media (max-width: 450px) {
    a {
      font-size: 16px;
      margin-bottom: 5px;
    }
    .localmenu1,
    .localmenu2 {
      padding: 70px;
    }
    .submenu {
      display: flex;
      flex-direction: column;
    }
    #arrow img {
      width: 90%;
    }
    #kontakt {
      margin: 100px 70px;
    }
  }
</style>

<script>
  // JavaScript from Chat GPT

  document.addEventListener("DOMContentLoaded", function () {
    const headerHeight = 165; // Header height in pixels

    // Function to handle smooth scrolling
    function smoothScroll(targetPosition) {
      window.scrollTo({
        top: targetPosition,
        behavior: "smooth",
      });
    }

    // Select all links within the .submenu
    const submenuLinks = document.querySelectorAll(".submenu a");

    submenuLinks.forEach((link) => {
      link.addEventListener("click", function (event) {
        // Prevent the default link behavior
        event.preventDefault();

        // Get the target element ID from the href attribute
        const targetId = this.getAttribute("href").substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          // Calculate the offset position
          const elementPosition =
            targetElement.getBoundingClientRect().top + window.pageYOffset;
          const offsetPosition = elementPosition - headerHeight;

          // Scroll to the offset position smoothly
          smoothScroll(offsetPosition);
        }
      });
    });

    // Handle smooth scroll for the #arrow link
    const arrowLink = document.getElementById("arrow");
    arrowLink.addEventListener("click", function (event) {
      // Prevent the default link behavior
      event.preventDefault();

      // Scroll to the top smoothly
      smoothScroll(0);
    });
  });
</script>
